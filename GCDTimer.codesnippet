<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>@GCDTimer</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>fileprivate enum State {
    case suspended
    case resumed
}

final class GCDTimer {
    private let timer: DispatchSourceTimer
    private var state: State = .suspended
    private var remainingTimes: Int {
        didSet {
            if remainingTimes == 0 { timer.cancel() }
        }
    }
    
    /// GCD 定时器
    /// - Parameters:
    ///   - interval: 任务执行间隔
    ///   - leeway: 任务执行精度，DispatchTimeInterval 类型，默认为 .seconds(0)
    ///   - times: 执行次数，0 表示无限重复，默认为 0
    ///   - queue: 任务所在的队列，默认为主队列
    ///   - handler: 所要执行的任务
    init(
        interval: DispatchTimeInterval,
        leeway: DispatchTimeInterval = .seconds(0),
        times: Int = 0,
        queue: DispatchQueue = .main,
        handler: @escaping (GCDTimer) -&gt; Void
    ) {
        guard times &gt;= 0 else {
            fatalError("The number of times cannot be negative!")
        }
        
        self.remainingTimes = times
        self.timer = DispatchSource.makeTimerSource(flags: .strict, queue: queue)
        self.timer.schedule(deadline: .now(), repeating: interval, leeway: leeway)
        self.timer.setEventHandler { [weak self] in
            guard let self = self else { return }
            
            handler(self)
            if self.remainingTimes &gt; 0 { self.remainingTimes -= 1 }
        }
    }
    
    func resume() {
        guard state == .suspended else { return }
        state = .resumed
        timer.resume()
    }
    
    func suspend() {
        guard state == .resumed else { return }
        state = .suspended
        timer.suspend()
    }
    
    deinit {
        timer.setEventHandler { }
        timer.cancel()
        
        /*
         If the timer is suspended, calling cancel without resuming
         triggers a crash. This is documented here https://forums.developer.apple.com/thread/15902
         */
        resume()
    }
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>1E89B49E-4B5C-4DD0-BCE8-FDBA5CE21738</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>GCDTimer</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>0</integer>
</dict>
</plist>
